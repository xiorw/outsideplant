{"version":3,"file":"AverageTrueRange.js","sourceRoot":"","sources":["../../../../../../src/.internal/charts/stock/indicators/AverageTrueRange.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IIndicatorEditableSetting } from \"./Indicator\";\r\n\r\nimport { ChartIndicator, IChartIndicatorSettings, IChartIndicatorPrivate, IChartIndicatorEvents } from \"./ChartIndicator\";\r\nimport { LineSeries } from \"../../xy/series/LineSeries\";\r\n\r\nimport * as $array from \"../../../core/util/Array\";\r\nimport type { DataItem } from \"../../../..\";\r\n\r\nexport interface IAverageTrueRangeSettings extends IChartIndicatorSettings {\r\n}\r\n\r\nexport interface IAverageTrueRangePrivate extends IChartIndicatorPrivate {\r\n}\r\n\r\nexport interface IAverageTrueRangeEvents extends IChartIndicatorEvents {\r\n}\r\n\r\n\r\n/**\r\n * An implementation of a [[StockChart]] indicator.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/charts/stock/indicators/} for more info\r\n */\r\nexport class AverageTrueRange extends ChartIndicator {\r\n    public static className: string = \"AverageTrueRange\";\r\n    public static classNames: Array<string> = ChartIndicator.classNames.concat([AverageTrueRange.className]);\r\n\r\n    declare public _settings: IAverageTrueRangeSettings;\r\n    declare public _privateSettings: IAverageTrueRangePrivate;\r\n    declare public _events: IAverageTrueRangeEvents;\r\n\r\n    /**\r\n     * Indicator series.\r\n     */\r\n    declare public series: LineSeries;\r\n\r\n    public _editableSettings: IIndicatorEditableSetting[] = [{\r\n        key: \"period\",\r\n        name: this.root.language.translateAny(\"Period\"),\r\n        type: \"number\"\r\n    }, {\r\n        key: \"seriesColor\",\r\n        name: this.root.language.translateAny(\"Color\"),\r\n        type: \"color\"\r\n    }];\r\n\r\n    public _afterNew() {\r\n        this._themeTags.push(\"averagetruerange\");\r\n        super._afterNew();\r\n    }\r\n\r\n    public _createSeries(): LineSeries {\r\n        return this.panel.series.push(LineSeries.new(this._root, {\r\n            themeTags: [\"indicator\"],\r\n            xAxis: this.xAxis,\r\n            yAxis: this.yAxis,\r\n            valueXField: \"valueX\",\r\n            valueYField: \"atr\",\r\n            fill: undefined\r\n        }))\r\n    }\r\n\r\n    protected _getDataArray(dataItems: Array<DataItem<any>>): Array<any> {\r\n        const data: Array<any> = [];\r\n        $array.each(dataItems, (dataItem) => {\r\n            data.push({ valueX: dataItem.get(\"valueX\"), value_close: dataItem.get(\"valueY\"), value_high: dataItem.get(\"highValueY\"), value_low: dataItem.get(\"lowValueY\") });\r\n        })\r\n        return data;\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    public prepareData() {\r\n        super.prepareData();\r\n\r\n        if (this.series) {\r\n\r\n            let period = this.get(\"period\", 20);\r\n            const stockSeries = this.get(\"stockSeries\");\r\n            const dataItems = stockSeries.dataItems;\r\n\r\n            let data = this._getDataArray(dataItems);\r\n\r\n            let i = 0;\r\n            let index = 0;\r\n            let tr = 0;\r\n            let prevClose: number | undefined;\r\n            let prevATR: number | undefined;\r\n\r\n            $array.each(data, (dataItem) => {\r\n\r\n                let valueClose = dataItem.value_close;\r\n\r\n                if (valueClose != null && prevClose != null) {\r\n                    i++;\r\n                    tr = Math.max(dataItem.value_high - dataItem.value_low, Math.abs(dataItem.value_high - prevClose), Math.abs(dataItem.value_low - prevClose));\r\n                    dataItem.tr = tr;\r\n\r\n                    if (i >= period) {\r\n                        if (i == period) {\r\n                            let sum = 0;\r\n                            let k = 0;\r\n                            for (let j = index; j >= 0; j--) {\r\n                                sum += data[j].tr;\r\n                                k++;\r\n                                if (k == period) {\r\n                                    break;\r\n                                }\r\n                            }\r\n                            dataItem.atr = sum / period;\r\n                        }\r\n                        else {\r\n                            if (prevATR != null) {\r\n                                dataItem.atr = (prevATR * (period - 1) + tr) / period;\r\n                            }\r\n                        }\r\n\r\n                        prevATR = dataItem.atr;\r\n                    }\r\n                }\r\n                prevClose = valueClose;\r\n                index++;\r\n            })\r\n\r\n            this.series.data.setAll(data);\r\n        }\r\n    }\r\n}"]}