{"version":3,"file":"AxisRendererCurveY.js","sourceRoot":"","sources":["../../../../../src/.internal/charts/timeline/AxisRendererCurveY.ts"],"names":[],"mappings":"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","sourcesContent":["import type { CurveChart } from \"./CurveChart\";\nimport type { Grid } from \"../xy/axes/Grid\";\nimport type { IPoint } from \"../../core/util/IPoint\";\nimport type { Graphics } from \"../../core/render/Graphics\";\nimport type { AxisTick } from \"../xy/axes/AxisTick\";\nimport type { AxisBullet } from \"../xy/axes/AxisBullet\";\nimport type { Tooltip } from \"../../core/render/Tooltip\";\nimport type { AxisRendererCurveX } from \"./AxisRendererCurveX\";\n\nimport { AxisRenderer, IAxisRendererSettings, IAxisRendererPrivate } from \"../xy/axes/AxisRenderer\";\nimport { AxisLabelRadial } from \"../xy/axes/AxisLabelRadial\";\nimport { arc } from \"d3-shape\";\nimport { ListTemplate } from \"../../core/util/List\";\nimport { Template } from \"../../core/util/Template\";\n\nimport * as $utils from \"../../core/util/Utils\";\nimport * as $type from \"../../core/util/Type\";\nimport * as $math from \"../../core/util/Math\";\nimport * as $array from \"../../core/util/Array\";\n\nexport interface IAxisRendererCurveYSettings extends IAxisRendererSettings {\n\n\t/**\n\t * Axis length in pixels.\n\t * \n\t * [[SerpentineChart]] and [[SpiralChart]] will ignore this setting as they\n\t * calculate axis length by the `yAxisRadius` setting of a chart itself.\n\t *\n\t * @default 60\n\t */\n\taxisLength?: number;\n\n\t/**\n\t * X-axis renderer.\n\t *\n\t * This setting is required.\n\t */\n\txRenderer?: AxisRendererCurveX;\n\n\t/**\n\t* Relative location of the axis on the chart: 0-1.\n\t*\n\t* * `0` - start\n\t* * `1` - end\n\t*\n\t* @default 0.5\n\t*/\n\taxisLocation?: number;\n\t\n\t/**\n\t * Should axis labels rotation should be adjusted to the axis rotation?\n\t *\n\t * @default false\n\t */\n\trotateLabels?: boolean;\n\n}\n\nexport interface IAxisRendererCurveYPrivate extends IAxisRendererPrivate {\n}\n\n/**\n * Renderer for [[CurveChart]] \"vertical\" axes.\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/timeline/} for more info\n * @since 5.12.0\n * @important\n */\nexport class AxisRendererCurveY extends AxisRenderer {\n\n\t/**\n\t * Chart this renderer is for.\n\t */\n\tdeclare public chart: CurveChart | undefined;\n\n\tpublic static className: string = \"AxisRendererCurveY\";\n\tpublic static classNames: Array<string> = AxisRenderer.classNames.concat([AxisRendererCurveY.className]);\n\n\tdeclare public _settings: IAxisRendererCurveYSettings;\n\tdeclare public _privateSettings: IAxisRendererCurveYPrivate;\n\n\tprotected _fillGenerator = arc();\n\n\t/**\n\t * A [[TemplateList]] with all the labels attached to the axis.\n\t *\n\t * `labels.template` can be used to configure appearance of the labels.\n\t *\n\t * @default new ListTemplate<AxisLabelRadial>\n\t */\n\tpublic readonly labels: ListTemplate<AxisLabelRadial> = this.addDisposer(new ListTemplate(\n\t\tTemplate.new({}),\n\t\t() => AxisLabelRadial._new(this._root, {\n\t\t\tthemeTags: $utils.mergeTags(this.labels.template.get(\"themeTags\", []), this.get(\"themeTags\", []))\n\t\t}, [this.labels.template])\n\t));\n\n\tpublic _afterNew() {\n\t\tthis._settings.themeTags = $utils.mergeTags(this._settings.themeTags, [\"renderer\", \"radial\"]);\n\t\tsuper._afterNew();\n\t\tthis.setPrivate(\"letter\", \"Y\");\n\t\tthis.setRaw(\"position\", \"absolute\");\n\t}\n\n\tpublic _changed() {\n\t\tsuper._changed();\n\n\t\tif (this.isDirty(\"axisLength\")) {\n\t\t\tthis.updateLayout();\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic processAxis() {\n\t\tsuper.processAxis();\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateLayout() {\n\t\tconst chart = this.chart;\n\t\tif (chart) {\n\t\t\tconst p0 = this.positionToPoint(0, 0);\n\t\t\tconst p1 = this.positionToPoint(1, 0);\n\n\t\t\t// draw axis\n\t\t\tthis.set(\"draw\", (display) => {\n\t\t\t\tdisplay.moveTo(p0.x, p0.y);\n\t\t\t\tdisplay.lineTo(p1.x, p1.y);\n\t\t\t})\n\n\t\t\tthis.axis.markDirtySize();\n\t\t\tchart._updateMasks();\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateGrid(grid?: Grid, position?: number, endPosition?: number) {\n\t\tif (grid) {\n\n\t\t\tif (!$type.isNumber(position)) {\n\t\t\t\tposition = 0;\n\t\t\t}\n\n\t\t\tlet location = grid.get(\"location\", 0.5);\n\t\t\tif ($type.isNumber(endPosition) && endPosition != position) {\n\t\t\t\tposition = position + (endPosition - position) * location;\n\t\t\t}\n\n\t\t\tthis.toggleVisibility(grid, position, 0, 1);\n\n\t\t\tlet xRenderer = this.get(\"xRenderer\")!;\n\t\t\tif (xRenderer) {\n\t\t\t\tconst points = xRenderer.get(\"points\");\n\t\t\t\tif (points) {\n\t\t\t\t\tgrid.set(\"draw\", (display) => {\n\t\t\t\t\t\tlet previousPoint: IPoint | undefined;\n\t\t\t\t\t\t$array.each(points, (_point, index) => {\n\t\t\t\t\t\t\tlet pointPostion = xRenderer.pointPostion[index];\n\t\t\t\t\t\t\tlet p = this.positionToPoint(position!, pointPostion, true);\n\n\t\t\t\t\t\t\tif (index == 0) {\n\t\t\t\t\t\t\t\tdisplay.moveTo(p.x, p.y);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t// if distance between previous and current is very small, we skip it\n\t\t\t\t\t\t\t\tif (previousPoint && Math.hypot(previousPoint.x - p.x, previousPoint.y - p.y) < .5) {\n\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\tdisplay.lineTo(p.x, p.y);\n\t\t\t\t\t\t\t\t\tpreviousPoint = p;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\n\n\n\t// do not delete\n\tprotected _handleOpposite() { }\n\n\t/**\n\t * Converts relative position to X/Y point.\n\t *\n\t * @param   position  Position\n\t * @return            Point\n\t */\n\tpublic positionToPoint(position: number, positionX?: number, doNotFix?: boolean): IPoint {\n\t\tif (positionX == undefined) {\n\t\t\tpositionX = 0;\n\t\t}\n\n\t\tconst xRenderer = this.get(\"xRenderer\");\n\t\tif (xRenderer) {\n\t\t\treturn xRenderer.positionToPoint(positionX, position, doNotFix)\n\t\t}\n\t\treturn { x: 0, y: 0 };\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateLabel(label?: AxisLabelRadial, position?: number, endPosition?: number, count?: number) {\n\t\tif (label) {\n\t\t\tif (!$type.isNumber(position)) {\n\t\t\t\tposition = 0;\n\t\t\t}\n\n\t\t\tlet location = 0.5;\n\t\t\tif ($type.isNumber(count) && count > 1) {\n\t\t\t\tlocation = label.get(\"multiLocation\", location);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlocation = label.get(\"location\", location);\n\t\t\t}\n\n\t\t\tif ($type.isNumber(endPosition) && endPosition != position) {\n\t\t\t\tposition = position + (endPosition - position) * location;\n\t\t\t}\n\n\t\t\tconst point = this.positionToPoint(position, 0);\n\t\t\tconst xRenderer = this.get(\"xRenderer\");\n\t\t\tif (xRenderer) {\n\t\t\t\tlet angle = 0;\n\t\t\t\tif (xRenderer) {\n\t\t\t\t\tangle = xRenderer.positionToAngle(0) - 90;\n\t\t\t\t}\n\t\t\t\tlabel.setAll({\n\t\t\t\t\tx: point.x,\n\t\t\t\t\ty: point.y\n\t\t\t\t});\n\n\t\t\t\tif(this.get(\"rotateLabels\", true)){\n\t\t\t\t\tlabel.set(\"rotation\", angle);\n\t\t\t\t}\t\t\t\t\n\t\t\t}\n\n\t\t\tthis.toggleVisibility(label, position, label.get(\"minPosition\", 0), label.get(\"maxPosition\", 1));\n\t\t}\n\t}\n\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateTick(tick?: AxisTick, position?: number, endPosition?: number, count?: number) {\n\t\tif (tick) {\n\n\t\t\tif (!$type.isNumber(position)) {\n\t\t\t\tposition = 0;\n\t\t\t}\n\n\t\t\tlet location = 0.5;\n\t\t\tif ($type.isNumber(count) && count > 1) {\n\t\t\t\tlocation = tick.get(\"multiLocation\", location);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlocation = tick.get(\"location\", location);\n\t\t\t}\n\n\t\t\tif ($type.isNumber(endPosition) && endPosition != position) {\n\t\t\t\tposition = position + (endPosition - position) * location;\n\t\t\t}\n\n\t\t\tconst point = this.positionToPoint(position, 0);\n\t\t\tconst xRenderer = this.get(\"xRenderer\");\n\t\t\tif (xRenderer) {\n\t\t\t\tlet angle = 0;\n\t\t\t\tif (xRenderer) {\n\t\t\t\t\tangle = xRenderer.positionToAngle(0) - 90;\n\t\t\t\t}\n\n\t\t\t\tlet length = tick.get(\"length\", 0);\n\t\t\t\tconst inside = tick.get(\"inside\");\n\n\t\t\t\tif (inside) {\n\t\t\t\t\tlength *= -1\n\t\t\t\t}\n\n\t\t\t\ttick.set(\"draw\", (display) => {\n\t\t\t\t\tdisplay.moveTo(point.x, point.y);\n\t\t\t\t\tdisplay.lineTo(point.x + length * $math.cos(angle), point.y + length * $math.sin(angle));\n\t\t\t\t})\n\n\t\t\t\tthis.toggleVisibility(tick, position, tick.get(\"minPosition\", 0), tick.get(\"maxPosition\", 1));\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateBullet(bullet?: AxisBullet, position?: number, endPosition?: number) {\n\t\tif (bullet) {\n\n\t\t\tconst sprite = bullet.get(\"sprite\");\n\n\t\t\tif (sprite) {\n\n\t\t\t\tif (!$type.isNumber(position)) {\n\t\t\t\t\tposition = 0;\n\t\t\t\t}\n\n\t\t\t\tlet location = bullet.get(\"location\", 0.5);\n\t\t\t\tif ($type.isNumber(endPosition) && endPosition != position) {\n\t\t\t\t\tposition = position + (endPosition - position) * location;\n\t\t\t\t}\n\n\t\t\t\tconst point = this.positionToPoint(position);\n\n\t\t\t\tsprite.setAll({ x: point.x, y: point.y });\n\n\t\t\t\tthis.toggleVisibility(sprite, position, 0, 1);\n\t\t\t}\n\t\t}\n\t}\n\n\n\tpublic getPoints(positionX: number, positionY: number, endPositionX: number, endPositionY: number) {\n\t\treturn this.get(\"xRenderer\")?.getPoints(positionX, positionY, endPositionX, endPositionY);\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateFill(fill?: Graphics, position?: number, endPosition?: number) {\n\t\tif (fill) {\n\t\t\tif (position == null) {\n\t\t\t\tposition = 0;\n\t\t\t}\n\t\t\tif (endPosition == null) {\n\t\t\t\tendPosition = 1;\n\t\t\t}\n\n\t\t\tconst points = this.getPoints(0, position, 1, endPosition);\n\t\t\tif (points) {\n\t\t\t\tfill.set(\"draw\", (display) => {\n\t\t\t\t\tdisplay.moveTo(points[0].x, points[0].y);\n\t\t\t\t\t$array.each(points, (point) => {\n\t\t\t\t\t\tdisplay.lineTo(point.x, point.y);\n\t\t\t\t\t})\n\t\t\t\t\tdisplay.closePath();\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Returns axis length in pixels.\n\t *\n\t * @return Length\n\t */\n\tpublic axisLength(): number {\n\t\treturn this.get(\"axisLength\", 60);\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateTooltipBounds(_tooltip: Tooltip) {\n\n\t}\n\n\t/**\n\t * Converts relative position to pixels.\n\t *\n\t * @param   position  Position\n\t * @return            Pixels\n\t */\n\tpublic positionToCoordinate(position: number): number {\n\t\tif (this._inversed) {\n\t\t\tposition = Math.min(this._end, position);\n\t\t\treturn (this._end - position) * this._axisLength;\n\t\t}\n\t\telse {\n\t\t\tposition = Math.max(this._start, position);\n\t\t\treturn (position - this._start) * this._axisLength;\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic positionTooltip(tooltip: Tooltip, position: number) {\n\t\tconst xRenderer = this.get(\"xRenderer\");\t\t\n\t\tif(xRenderer){\n\t\t\tconst point = this.positionToPoint(position, xRenderer.axis.get(\"start\", 0));\n\t\t\tthis._positionTooltip(tooltip, point);\n\t\t}\n\t}\n}\n"]}