{"version":3,"file":"CurveChart.js","sourceRoot":"","sources":["../../../../../src/.internal/charts/timeline/CurveChart.ts"],"names":[],"mappings":"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","sourcesContent":["import type { AxisRendererCurveX } from \"./AxisRendererCurveX\";\nimport type { AxisRendererCurveY } from \"./AxisRendererCurveY\";\nimport type { Axis } from \"../xy/axes/Axis\";\nimport type { XYSeries } from \"../xy/series/XYSeries\";\nimport type { CurveCursor } from \"./CurveCursor\";\nimport type { CurveColumnSeries } from \"./CurveColumnSeries\";\nimport type { IPoint } from \"../../core/util/IPoint\";\n\nimport { CurveDefaultTheme } from \"./CurveDefaultTheme\";\nimport { XYChart, IXYChartPrivate, IXYChartSettings } from \"../xy/XYChart\";\nimport { p50 } from \"../../core/util/Percent\";\nimport { Container } from \"../../core/render/Container\";\nimport { Graphics } from \"../../core/render/Graphics\";\n\n\nexport interface ICurveChartSettings extends IXYChartSettings {\n\n\t/**\n\t * [[CurveCursor]] instance.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/timeline-chart/#Cursor} for more info\n\t */\n\tcursor?: CurveCursor;\n\n}\n\nexport interface ICurveChartPrivate extends IXYChartPrivate {\n\n}\n\n/**\n * Base chart for a Timeline chart.\n *\n * For this chart to work, it needs curve points provided via renderer of\n * its X-axis.\n * \n * Note: it is an experimental chart type and does not support all the\n * functionality of the [[XYChart]].\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/timeline/} for more info\n * @since 5.12.0\n * @important\n */\nexport class CurveChart extends XYChart {\n\n\t/**\n\t * [[Container]] where chart elements go.\n\t *\n\t * @default Container.new()\n\t */\n\tpublic readonly curveContainer = this.plotContainer.children.push(Container.new(this._root, { x: p50, y: p50 }));\n\n\tpublic static className: string = \"CurveChart\";\n\tpublic static classNames: Array<string> = XYChart.classNames.concat([CurveChart.className]);\n\n\tdeclare public _settings: ICurveChartSettings;\n\tdeclare public _privateSettings: ICurveChartPrivate;\n\n\tdeclare public _seriesType: CurveColumnSeries;\n\n\n\tprotected _afterNew() {\n\t\tthis._defaultThemes.push(CurveDefaultTheme.new(this._root));\n\n\t\tsuper._afterNew();\n\n\t\tconst curveContainer = this.curveContainer;\n\t\tconst gridContainer = this.gridContainer;\n\t\tconst topGridContainer = this.topGridContainer;\n\t\tconst seriesContainer = this.seriesContainer;\n\t\tconst bulletsContainer = this.bulletsContainer;\n\n\t\tcurveContainer.children.pushAll([gridContainer, seriesContainer, topGridContainer, bulletsContainer]);\n\n\t\tseriesContainer.set(\"mask\", Graphics.new(this._root, {}));\n\t\tgridContainer.set(\"mask\", Graphics.new(this._root, {}));\n\n\t\tthis._disposers.push(this.plotContainer.events.on(\"boundschanged\", () => {\n\t\t\tthis._updateMasks();\n\t\t}));\n\t}\n\n\tprotected _maskGrid() {\n\n\t}\n\n\n\tprotected _addCursor(cursor: CurveCursor) {\n\t\tthis.curveContainer.children.push(cursor);\n\t}\n\n\n\t// do not delete\n\tpublic _updateMasks() {\n\n\t\tthis.xAxes.each((axis) => {\n\t\t\tconst renderer = axis.get(\"renderer\") as AxisRendererCurveX;\n\t\t\trenderer._updateLayout();\n\t\t})\n\n\t\tthis._updateMask(this.seriesContainer);\n\t\tthis._updateMask(this.gridContainer);\n\n\t\tthis.series.each((series) => {\n\t\t\tif ((series as XYSeries).get(\"maskBullets\")) {\n\t\t\t\tthis._updateMask(series.bulletsContainer);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tseries.bulletsContainer.set(\"mask\", undefined);\n\t\t\t}\n\t\t})\n\n\t\tthis.yAxes.each((axis) => {\n\t\t\taxis.markDirtySize();\n\t\t})\t\t\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic _updateMask(container: Container) {\n\n\t\tconst mask = container.get(\"mask\");\n\t\tif (mask) {\n\t\t\tconst xAxis = this.xAxes.getIndex(0);\n\t\t\tconst yAxis = this.yAxes.getIndex(0);\n\t\t\tif (xAxis && yAxis) {\n\t\t\t\tconst renderer = xAxis.get(\"renderer\") as AxisRendererCurveX;\n\t\t\t\tconst points = renderer.getPoints(xAxis.get(\"start\", 0), yAxis.get(\"start\", 0), xAxis.get(\"end\", 1), yAxis.get(\"end\", 1));\n\n\t\t\t\tmask.set(\"draw\", (display) => {\n\t\t\t\t\tdisplay.moveTo(points[0].x, points[0].y);\n\t\t\t\t\tfor (let i = 1; i < points.length; i++) {\n\t\t\t\t\t\tdisplay.lineTo(points[i].x, points[i].y);\n\t\t\t\t\t}\n\t\t\t\t\tdisplay.closePath();\n\t\t\t\t})\n\n\t\t\t\txAxis.markDirtySize();\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic processAxis(axis: Axis<AxisRendererCurveY | AxisRendererCurveX>) {\n\t\tthis.curveContainer.children.unshift(axis);\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic inPlot(_point: IPoint): boolean {\t\t\n\t\treturn true;\n\t}\n\n\tprotected _tooltipToLocal(point: IPoint): IPoint {\n\t\treturn this.curveContainer._display.toLocal(point);\n\t}\n\n\tprotected _handlePinch() {\n\n\t}\n}\n"]}