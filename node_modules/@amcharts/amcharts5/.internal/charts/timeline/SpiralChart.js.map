{"version":3,"file":"SpiralChart.js","sourceRoot":"","sources":["../../../../../src/.internal/charts/timeline/SpiralChart.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAA2C,MAAM,cAAc,CAAC;AACnF,OAAO,EAAE,GAAG,EAAW,MAAM,yBAAyB,CAAC;AAMvD,OAAO,KAAK,KAAK,MAAM,sBAAsB,CAAC;AAC9C,OAAO,KAAK,MAAM,MAAM,uBAAuB,CAAC;AA6ChD;;;;;;;;;;;;GAYG;AACH,MAAM,OAAO,WAAY,SAAQ,UAAU;IAWnC,gBAAgB;QACtB,KAAK,CAAC,gBAAgB,EAAE,CAAC;QAEzB,IAAI,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,EAAE;YAC/B,IAAI,CAAC,YAAY,EAAE,CAAC;SACpB;IACF,CAAC;IAEM,YAAY;QAElB,IAAI,CAAC,GAAG,IAAI,CAAC,aAAa,CAAC,UAAU,EAAE,CAAC;QACxC,IAAI,CAAC,GAAG,IAAI,CAAC,aAAa,CAAC,WAAW,EAAE,CAAC;QAEzC,IAAI,MAAM,GAAW,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC;QACxC,IAAI,WAAW,GAAG,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;QAC7E,IAAI,UAAU,GAAG,CAAC,MAAM,GAAG,WAAW,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;QACpE,IAAI,WAAW,GAAW,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,GAAG,CAAC,aAAa,EAAE,GAAG,CAAC,EAAE,UAAU,CAAC,CAAC;QAE3F,MAAM,MAAM,GAAG,KAAK,CAAC,YAAY,CAAC,CAAC,EAAE,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,WAAW,EAAE,EAAE,EAAE,UAAU,EAAE,IAAI,CAAC,GAAG,CAAC,YAAY,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,UAAU,EAAE,GAAG,CAAC,CAAC,CAAC;QAE3I,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE;YACxB,MAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,UAAU,CAAuB,CAAC;YAC5D,QAAQ,CAAC,GAAG,CAAC,YAAY,EAAE,WAAW,CAAC,CAAC;YACxC,IAAI,CAAC,aAAa,EAAE,CAAC;QACtB,CAAC,CAAC,CAAA;QAEF,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE;YACxB,MAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,UAAU,CAAuB,CAAC;YAC5D,QAAQ,CAAC,UAAU,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;YACxC,QAAQ,CAAC,GAAG,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;QAChC,CAAC,CAAC,CAAA;QACF,KAAK,CAAC,YAAY,EAAE,CAAC;IACtB,CAAC;;AAzCD;;;;WAAkC,aAAa;GAAC;AAChD;;;;WAA0C,UAAU,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;GAAC","sourcesContent":["import { CurveChart, ICurveChartPrivate, ICurveChartSettings } from \"./CurveChart\";\r\nimport { p50, Percent } from \"../../core/util/Percent\";\r\n\r\nimport type { CurveColumnSeries } from \"./CurveColumnSeries\";\r\nimport type { AxisRendererCurveY } from \"./AxisRendererCurveY\";\r\nimport type { AxisRendererCurveX } from \"./AxisRendererCurveX\";\r\n\r\nimport * as $math from \"../../core/util/Math\";\r\nimport * as $utils from \"../../core/util/Utils\";\r\n\r\n\r\nexport interface ISpiralChartSettings extends ICurveChartSettings {\r\n\r\n\t/**\r\n\t * Numer of spiral circles.\r\n\t *\r\n\t * @default 3\r\n\t */\r\n\tlevelCount?: number;\r\n\r\n\t/**\r\n\t * y Axis radius in percent.\r\n\t *\r\n\t * @defgault 50%\r\n\t */\r\n\tyAxisRadius?: Percent;\r\n\r\n\t/**\r\n\t * Start angle of the spiral in degrees.\r\n\t *\r\n\t * @default -90\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * End angle of the spiral in degrees.\r\n\t *\r\n\t * default 0\r\n\t */\r\n\tendAngle?: number;\r\n\r\n\t/**\r\n\t * Inner radius of the spiral in percent.\r\n\t *\r\n\t * @default 60%\r\n\t */\r\n\tinnerRadius?: Percent;\r\n\r\n}\r\n\r\nexport interface ISpiralChartPrivate extends ICurveChartPrivate {\r\n}\r\n\r\n/**\r\n * A spiral chart.\r\n * \r\n * For this chart to work, it needs curve points provided via renderer of\r\n * its X-axis.\r\n * \r\n * Note: it is an experimental chart type and does not support all the\r\n * functionality of the [[XYChart]].\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/charts/timeline/} for more info\r\n * @since 5.12.0\r\n * @important\r\n */\r\nexport class SpiralChart extends CurveChart {\r\n\r\n\tpublic static className: string = \"SpiralChart\";\r\n\tpublic static classNames: Array<string> = CurveChart.classNames.concat([SpiralChart.className]);\r\n\r\n\tdeclare public _settings: ISpiralChartSettings;\r\n\tdeclare public _privateSettings: ISpiralChartPrivate;\r\n\r\n\tdeclare public _seriesType: CurveColumnSeries;\r\n\r\n\r\n\tpublic _prepareChildren(): void {\r\n\t\tsuper._prepareChildren();\r\n\r\n\t\tif (this.isDirty(\"levelCount\")) {\r\n\t\t\tthis._updateMasks();\r\n\t\t}\r\n\t}\r\n\r\n\tpublic _updateMasks(): void {\r\n\r\n\t\tlet w = this.plotContainer.innerWidth();\r\n\t\tlet h = this.plotContainer.innerHeight();\r\n\r\n\t\tlet radius: number = Math.min(w, h) / 2;\r\n\t\tlet innerRadius = $utils.relativeToValue(this.get(\"innerRadius\", 0), radius);\r\n\t\tlet radiusStep = (radius - innerRadius) / this.get(\"levelCount\", 1);\r\n\t\tlet yAxisRadius: number = $utils.relativeToValue(this.get(\"yAxisRadius\", p50), radiusStep);\r\n\r\n\t\tconst points = $math.spiralPoints(0, 0, radius, radius, innerRadius, 20, radiusStep, this.get(\"startAngle\", 0), this.get(\"endAngle\", 360));\r\n\r\n\t\tthis.yAxes.each((axis) => {\r\n\t\t\tconst renderer = axis.get(\"renderer\") as AxisRendererCurveY;\r\n\t\t\trenderer.set(\"axisLength\", yAxisRadius);\r\n\t\t\taxis.markDirtySize();\r\n\t\t})\r\n\r\n\t\tthis.xAxes.each((axis) => {\r\n\t\t\tconst renderer = axis.get(\"renderer\") as AxisRendererCurveX;\r\n\t\t\trenderer.setPrivate(\"autoScale\", false);\r\n\t\t\trenderer.set(\"points\", points);\r\n\t\t})\r\n\t\tsuper._updateMasks();\r\n\t}\r\n}\r\n"]}