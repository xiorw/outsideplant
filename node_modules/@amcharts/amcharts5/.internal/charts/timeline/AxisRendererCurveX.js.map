{"version":3,"file":"AxisRendererCurveX.js","sourceRoot":"","sources":["../../../../../src/.internal/charts/timeline/AxisRendererCurveX.ts"],"names":[],"mappings":"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","sourcesContent":["import type { CurveChart } from \"./CurveChart\";\nimport type { Grid } from \"../xy/axes/Grid\";\nimport type { IPoint } from \"../../core/util/IPoint\";\nimport type { AxisTick } from \"../xy/axes/AxisTick\";\nimport type { AxisBullet } from \"../xy/axes/AxisBullet\";\nimport type { Tooltip } from \"../../core/render/Tooltip\";\nimport type { AxisRendererCurveY } from \"./AxisRendererCurveY\";\n\nimport { Slice } from \"../../core/render/Slice\";\nimport { AxisRenderer, IAxisRendererSettings, IAxisRendererPrivate } from \"../xy/axes/AxisRenderer\";\nimport { AxisLabel } from \"../xy/axes/AxisLabel\";\nimport { ListTemplate } from \"../../core/util/List\";\nimport { Template } from \"../../core/util/Template\";\n\nimport * as $utils from \"../../core/util/Utils\";\nimport * as $math from \"../../core/util/Math\";\nimport * as $array from \"../../core/util/Array\";\n\nexport interface IAxisRendererCurveXSettings extends IAxisRendererSettings {\n\t/**\n\t * Array of control points to draw axis along.\n\t */\n\tpoints?: Array<IPoint>;\n\n\t/**\n\t * Y renderer of a Y axis. Must be defined!\n\t */\n\tyRenderer: AxisRendererCurveY;\n\n\t/**\n\t * If labels rotation should be adjusted to the axis rotation\n\t */\n\trotateLabels?: boolean;\n}\n\nexport interface IAxisRendererCurveXPrivate extends IAxisRendererPrivate {\n\tscale?: number;\n\tcenterX?: number;\n\tcenterY?: number;\n\taxisLength?: number;\n\tautoScale?: boolean;\n}\n\n/**\n * Renderer for [[CurveChart]] \"horizontal\" axes.\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/timeline/} for more info\n * @since 5.12.0\n * @important\n */\nexport class AxisRendererCurveX extends AxisRenderer {\n\n\t/**\n\t * Chart this renderer is for.\n\t */\n\tdeclare public chart: CurveChart | undefined;\n\n\t/**\n\t * A list of labels in the axis.\n\t *\n\t * `labels.template` can be used to configure labels.\n\t *\n\t * @default new ListTemplate<AxisLabelRadial>\n\t */\n\tpublic readonly labels: ListTemplate<AxisLabel> = this.addDisposer(new ListTemplate(\n\t\tTemplate.new({}),\n\t\t() => AxisLabel._new(this._root, {\n\t\t\tthemeTags: $utils.mergeTags(this.labels.template.get(\"themeTags\", []), this.get(\"themeTags\", []))\n\t\t}, [this.labels.template])\n\t));\n\n\n\t/**\n\t * A list of fills in the axis.\n\t *\n\t * `axisFills.template` can be used to configure axis fills.\n\t *\n\t * @default new ListTemplate<Slice>\n\t */\n\tpublic readonly axisFills: ListTemplate<Slice> = this.addDisposer(new ListTemplate(\n\t\tTemplate.new({}),\n\t\t() => Slice._new(this._root, {\n\t\t\tthemeTags: $utils.mergeTags(this.axisFills.template.get(\"themeTags\", [\"fill\"]), this.get(\"themeTags\", []))\n\t\t}, [this.axisFills.template])\n\t));\n\n\n\tpublic static className: string = \"AxisRendererCurveX\";\n\tpublic static classNames: Array<string> = AxisRenderer.classNames.concat([AxisRendererCurveX.className]);\n\n\tdeclare public _settings: IAxisRendererCurveXSettings;\n\tdeclare public _privateSettings: IAxisRendererCurveXPrivate;\n\n\tpublic pointPostion: Array<number> = [];\n\n\tpublic pointDistance: Array<number> = [];\n\n\tprotected _normalizedPoints: Array<IPoint> = [];\n\n\tpublic _afterNew() {\n\t\tthis._settings.themeTags = $utils.mergeTags(this._settings.themeTags, [\"renderer\", \"circular\"]);\n\t\tsuper._afterNew();\n\t\tthis.setPrivateRaw(\"letter\", \"X\");\n\t\tthis.setRaw(\"position\", \"absolute\");\n\t}\n\n\tpublic _beforeChanged() {\n\t\tsuper._beforeChanged();\n\n\t\tif (this.isDirty(\"points\")) {\n\t\t\tthis._updateLayout();\n\t\t}\n\n\t\tif (this.isDirty(\"yRenderer\")) {\n\t\t\tconst yRenderer = this.get(\"yRenderer\");\n\t\t\tyRenderer.set(\"xRenderer\", this);\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic processAxis() {\n\t\tsuper.processAxis();\n\t\tconst axis = this.axis;\n\t\taxis.labelsContainer.set(\"isMeasured\", false);\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic _updateLayout() {\n\t\tconst chart = this.chart;\n\t\tif (chart) {\n\t\t\tconst points = this.get(\"points\");\n\n\t\t\tif (points) {\n\t\t\t\t// find extreme points\n\t\t\t\tlet minX = Infinity;\n\t\t\t\tlet minY = Infinity;\n\t\t\t\tlet maxX = -Infinity;\n\t\t\t\tlet maxY = -Infinity;\n\n\t\t\t\tlet axisLength = 0;\n\n\t\t\t\tlet prevPoint = points[0];\n\n\t\t\t\t$array.each(points, (point, i) => {\n\t\t\t\t\tminX = Math.min(minX, point.x);\n\t\t\t\t\tminY = Math.min(minY, point.y);\n\t\t\t\t\tmaxX = Math.max(maxX, point.x);\n\t\t\t\t\tmaxY = Math.max(maxY, point.y);\n\t\t\t\t\taxisLength += Math.hypot(point.x - prevPoint.x, point.y - prevPoint.y);\n\t\t\t\t\tthis.pointDistance[i] = axisLength;\n\t\t\t\t\tprevPoint = point;\n\t\t\t\t});\n\n\t\t\t\t$array.each(points, (_p, i) => {\n\t\t\t\t\tthis.pointPostion[i] = this.pointDistance[i] / axisLength;\n\t\t\t\t});\n\n\t\t\t\tlet yAxisLenght = this.get(\"yRenderer\").get(\"axisLength\", 0);\n\t\t\t\tlet aw = maxX - minX + 2 * yAxisLenght;\n\t\t\t\tlet ah = maxY - minY + 2 * yAxisLenght;\t\n\n\t\t\t\t// calculate center\n\t\t\t\tlet centerX = (minX + maxX) / 2;\n\t\t\t\tlet centerY = (minY + maxY) / 2;\n\n\t\t\t\t// take width and height of a chart\n\t\t\t\tlet width = chart.innerWidth();\n\t\t\t\tlet height = chart.innerHeight();\n\n\t\t\t\t// calculate scale\n\t\t\t\tlet scaleX = width / aw;\n\t\t\t\tlet scaleY = height / ah;\n\n\t\t\t\t// calculate scale\n\t\t\t\tlet scale = Math.min(scaleX, scaleY);\n\n\t\t\t\tif (!this.getPrivate(\"autoScale\", true)) {\n\t\t\t\t\tscale = 1;\n\t\t\t\t}\n\n\t\t\t\tthis.axis.setPrivateRaw(\"width\", aw * scale);\n\t\t\t\tthis.axis.setPrivateRaw(\"height\", ah * scale);\n\t\t\t\tthis.setPrivateRaw(\"centerX\", centerX);\n\t\t\t\tthis.setPrivateRaw(\"centerY\", centerY);\n\t\t\t\tthis.setPrivateRaw(\"scale\", scale);\n\t\t\t\tthis.setPrivateRaw(\"axisLength\", axisLength);\n\n\t\t\t\tthis.set(\"draw\", (display) => {\n\t\t\t\t\tdisplay.moveTo((points[0].x - centerX) * scale, (points[0].y - centerY) * scale);\n\t\t\t\t\t$array.each(points, (point) => {\n\t\t\t\t\t\tdisplay.lineTo((point.x - centerX) * scale, (point.y - centerY) * scale);\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\t\tprevPoint = points[0];\n\n\t\t\t\tthis._normalizedPoints = [];\n\t\t\t\t$array.each(points, (point) => {\n\t\t\t\t\tlet distance = Math.hypot(point.x - prevPoint.x, point.y - prevPoint.y);\n\t\t\t\t\tfor (let i = 1; i < distance; i++) {\n\t\t\t\t\t\tlet x = ((prevPoint.x + (point.x - prevPoint.x) * i / distance) - centerX) * scale;\n\t\t\t\t\t\tlet y = ((prevPoint.y + (point.y - prevPoint.y) * i / distance) - centerY) * scale;\n\n\t\t\t\t\t\t// check distance to previous normalized point\n\t\t\t\t\t\tconst prevNormalized = this._normalizedPoints[this._normalizedPoints.length - 1];\n\t\t\t\t\t\tif (prevNormalized) {\n\t\t\t\t\t\t\tlet distance = Math.hypot(x - prevNormalized.x, y - prevNormalized.y);\n\t\t\t\t\t\t\tif (distance < .5) {\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis._normalizedPoints.push({ x: x, y: y });\n\t\t\t\t\t}\n\t\t\t\t\tprevPoint = point;\n\t\t\t\t})\n\n\t\t\t\tthis.axis.markDirtySize();\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateGrid(grid?: Grid, position?: number, endPosition?: number) {\n\t\tif (grid) {\n\t\t\tif (position == null) {\n\t\t\t\tposition = 0;\n\t\t\t}\n\n\t\t\tlet location = grid.get(\"location\", 0.5);\n\t\t\tif (endPosition != null && endPosition != position) {\n\t\t\t\tposition = position + (endPosition - position) * location;\n\t\t\t}\n\n\t\t\tthis.toggleVisibility(grid, position, 0, 1);\n\n\t\t\tconst p0 = this.positionToPoint(position, 0);\n\t\t\tconst p1 = this.positionToPoint(position, 1);\n\n\t\t\tgrid.set(\"draw\", (display) => {\n\t\t\t\tdisplay.moveTo(p0.x, p0.y);\n\t\t\t\tdisplay.lineTo(p1.x, p1.y);\n\t\t\t})\n\t\t}\n\t}\n\n\t/**\n\t * Converts relative position to angle.\n\t *\n\t * @param   position  Position\n\t * @return            Angle\n\t */\n\tpublic positionToAngle(position: number): number {\n\n\t\tposition = this.toGlobalPosition(position);\n\n\t\tlet points = this.get(\"points\");\n\t\tlet axisLength = this.getPrivate(\"axisLength\", 0);\n\t\tlet angle = 0;\n\n\t\t// find which segment the position is in\n\t\tif (points) {\n\t\t\tlet totalLength = 0;\n\t\t\tlet prevPoint = points[0];\n\n\t\t\t$array.eachContinue(points, (point) => {\n\t\t\t\tlet segmentLength = Math.hypot(point.x - prevPoint.x, point.y - prevPoint.y);\n\t\t\t\ttotalLength += segmentLength;\n\t\t\t\tif (totalLength > position * axisLength) {\n\t\t\t\t\tangle = $math.getAngle(prevPoint, point) + 90;\n\t\t\t\t\treturn false\n\t\t\t\t}\n\t\t\t\tprevPoint = point;\n\t\t\t\treturn true;\n\t\t\t})\n\n\t\t}\n\n\t\treturn angle;\n\t}\n\n\tpublic getPoints(positionX: number, positionY: number, endPositionX: number, endPositionY: number) {\n\t\tlet yRenderer = this.get(\"yRenderer\");\n\t\tlet points = [];\n\n\t\tif (positionX > endPositionX) {\n\t\t\t[positionX, endPositionX] = [endPositionX, positionX];\n\t\t}\n\n\t\tif (positionY > endPositionY) {\n\t\t\t[positionY, endPositionY] = [endPositionY, positionY];\n\t\t}\n\n\t\tif (yRenderer) {\n\t\t\tlet indexStart = this.positionToIndex(positionX);\n\t\t\tlet indexEnd = this.positionToIndex(endPositionX);\n\n\t\t\tpoints.push(this.positionToPoint(positionX, positionY));\n\n\t\t\tfor (let i = indexStart; i <= indexEnd + 1; i++) {\n\t\t\t\tlet position = this.indexToPosition(i);\n\t\t\t\tif (position > positionX && position < endPositionX) {\n\t\t\t\t\tpoints.push(this.positionToPoint(position, positionY));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tpoints.push(this.positionToPoint(endPositionX, positionY));\n\n\t\t\tif (endPositionY != positionY) {\n\t\t\t\tpoints.push(this.positionToPoint(endPositionX, endPositionY));\n\t\t\t\tfor (let i = indexEnd + 1; i >= indexStart; i--) {\n\t\t\t\t\tlet position = this.indexToPosition(i);\n\t\t\t\t\tif (position > positionX && position < endPositionX) {\n\t\t\t\t\t\tpoints.push(this.positionToPoint(position, endPositionY));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tpoints.push(this.positionToPoint(positionX, endPositionY));\n\t\t\t\tpoints.push(points[0]);\n\t\t\t}\n\t\t}\n\n\t\treturn points;\n\t}\n\n\t// do not delete\n\tprotected _handleOpposite() { }\n\n\n\tpublic positionToIndex(position: number): number {\n\t\tlet points = this.get(\"points\");\n\t\tlet axisLength = this.getPrivate(\"axisLength\", 0);\n\t\tlet index = 0;\n\n\t\tposition = this.toGlobalPosition(position);\n\n\t\tif (points && points.length > 1) {\n\t\t\tlet totalLength = 0;\n\t\t\tlet prevPoint = points[0];\n\n\t\t\tif (position <= 0) {\n\t\t\t\tindex = 0;\n\t\t\t}\n\t\t\telse if (position >= 1) {\n\t\t\t\tconst len = points.length\n\t\t\t\tindex = len - 1;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlet i = 0;\n\t\t\t\t$array.eachContinue(points, (point) => {\n\t\t\t\t\tlet segmentLength = Math.hypot(point.x - prevPoint.x, point.y - prevPoint.y);\n\t\t\t\t\ttotalLength += segmentLength;\n\t\t\t\t\tif (totalLength >= position * axisLength) {\n\t\t\t\t\t\tindex = i;\n\t\t\t\t\t\treturn false\n\t\t\t\t\t}\n\t\t\t\t\tprevPoint = point;\n\t\t\t\t\ti++;\n\t\t\t\t\treturn true;\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\n\t\treturn index;\n\t}\n\n\tpublic indexToPosition(index: number): number {\n\t\tlet points = this.get(\"points\");\n\t\tlet axisLength = this.getPrivate(\"axisLength\", 0);\n\t\tlet position = 0;\n\n\t\tif (points && points.length > 1) {\n\t\t\tlet totalLength = 0;\n\t\t\tlet prevPoint = points[0];\n\n\t\t\tlet i = 0;\n\t\t\t$array.eachContinue(points, (point) => {\n\t\t\t\tposition = totalLength / axisLength;\n\t\t\t\tif (i == index) {\n\t\t\t\t\treturn false\n\t\t\t\t}\n\t\t\t\tlet segmentLength = Math.hypot(point.x - prevPoint.x, point.y - prevPoint.y);\n\t\t\t\ttotalLength += segmentLength;\n\t\t\t\tprevPoint = point;\n\t\t\t\ti++;\n\t\t\t\treturn true;\n\t\t\t})\n\t\t}\n\n\t\treturn this.toAxisPosition(position);\n\t}\n\n\tpublic pointToPosition(point: IPoint): IPoint {\n\t\tlet minDistance = Infinity;\n\t\tlet index = 0;\n\t\tlet prevPoint = this._normalizedPoints[0];\n\t\tlet angle = 0;\n\t\t$array.each(this._normalizedPoints, (normalizedPoint, i) => {\n\t\t\tlet distance = Math.hypot(normalizedPoint.x - point.x, normalizedPoint.y - point.y);\n\t\t\tif (distance < minDistance) {\n\t\t\t\tminDistance = distance;\n\t\t\t\tindex = i;\n\t\t\t\tangle = $math.getAngle(point, normalizedPoint) - $math.getAngle(prevPoint, normalizedPoint);\n\t\t\t}\n\t\t\tprevPoint = normalizedPoint;\n\t\t})\n\n\t\tconst yRenderer = this.get(\"yRenderer\");\n\t\tconst scale = this.getPrivate(\"scale\", 1);\n\t\tconst rendererY = this.get(\"yRenderer\");\n\n\t\tconst y = -minDistance / (yRenderer.get(\"axisLength\", 0) * scale) * $math.sin(angle) + rendererY.get(\"axisLocation\", 0);\n\t\treturn { x: index / this._normalizedPoints.length, y: y };\n\t}\n\n\n\t/**\n\t * Converts relative position to an X/Y coordinate.\n\t *\n\t * @param   position  Position\n\t * @return            Point\n\t */\n\tpublic positionToPoint(position: number, positionY?: number, doNotFix?: boolean): IPoint {\n\n\t\tif (positionY == undefined) {\n\t\t\tpositionY = 0;\n\t\t}\n\n\t\tconst rendererY = this.get(\"yRenderer\");\n\t\tif (!doNotFix) {\n\t\t\tposition = this.toGlobalPosition(position);\n\t\t}\n\t\tpositionY = rendererY.toGlobalPosition(positionY);\n\t\tpositionY -= rendererY.get(\"axisLocation\", 0);\n\n\t\tlet points = this.get(\"points\");\n\t\tlet axisLength = this.getPrivate(\"axisLength\", 0);\n\t\tlet scale = this.getPrivate(\"scale\", 1);\n\t\tlet pointOfPosition: IPoint = { x: 0, y: 0 };\n\t\tlet angle = 0;\n\n\t\t// find which segment the position is in\n\t\tif (points && points.length > 1) {\n\t\t\tlet totalLength = 0;\n\t\t\tlet prevPoint = points[0];\n\n\t\t\tif (position <= 0) {\n\t\t\t\tangle = $math.getAngle(points[0], points[1]) + 90;\n\t\t\t\tpointOfPosition = points[0];\n\t\t\t}\n\t\t\telse if (position >= 1) {\n\t\t\t\tconst len = points.length;\n\t\t\t\tangle = $math.getAngle(points[len - 2], points[len - 1]) + 90;\n\t\t\t\tpointOfPosition = points[len - 1];\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$array.eachContinue(points, (point) => {\n\t\t\t\t\tlet segmentLength = Math.hypot(point.x - prevPoint.x, point.y - prevPoint.y);\n\t\t\t\t\ttotalLength += segmentLength;\n\t\t\t\t\tif (totalLength >= position * axisLength) {\n\t\t\t\t\t\tlet segementStartPosition = (totalLength - segmentLength) / axisLength;\n\t\t\t\t\t\tlet segmentPosition = (position * axisLength - segementStartPosition * axisLength) / segmentLength;\n\n\t\t\t\t\t\tpointOfPosition = { x: prevPoint.x + (point.x - prevPoint.x) * segmentPosition, y: prevPoint.y + (point.y - prevPoint.y) * segmentPosition };\n\t\t\t\t\t\tangle = $math.getAngle(prevPoint, point) + 90;\n\t\t\t\t\t\treturn false\n\t\t\t\t\t}\n\t\t\t\t\tprevPoint = point;\n\t\t\t\t\treturn true;\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\n\t\tlet centerX = this.getPrivate(\"centerX\", 0);\n\t\tlet centerY = this.getPrivate(\"centerY\", 0);\n\n\t\tlet axisX = (pointOfPosition.x - centerX) * scale;\n\t\tlet axisY = (pointOfPosition.y - centerY) * scale;\n\n\t\tif (positionY == null) {\n\t\t\tpositionY = 0;\n\t\t}\n\n\t\tlet lengthY = -rendererY.get(\"axisLength\", 0);\n\n\t\tlet dy = lengthY * positionY * scale;\n\n\t\tlet x = axisX + $math.cos(angle) * dy;\n\t\tlet y = axisY + $math.sin(angle) * dy;\n\n\t\treturn { x: x, y: y };\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateLabel(label?: AxisLabel, position?: number, endPosition?: number, count?: number) {\n\t\tif (label) {\n\t\t\tif (position == null) {\n\t\t\t\tposition = 0;\n\t\t\t}\n\n\t\t\tlet location = 0.5;\n\t\t\tif (count != null && count > 1) {\n\t\t\t\tlocation = label.get(\"multiLocation\", location);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlocation = label.get(\"location\", location);\n\t\t\t}\n\n\t\t\tif (endPosition != null && endPosition != position) {\n\t\t\t\tposition = position + (endPosition - position) * location;\n\t\t\t}\n\n\t\t\tconst angle = this.positionToAngle(position);\n\n\t\t\tconst rendererY = this.get(\"yRenderer\");\n\t\t\tconst axisY = rendererY.axis;\n\n\t\t\tconst point = this.positionToPoint(position, axisY.get(\"start\", 0) + rendererY.get(\"axisLocation\", 0));\n\n\t\t\tlabel.setAll({\n\t\t\t\tx: point.x,\n\t\t\t\ty: point.y\n\t\t\t});\n\n\t\t\tif (this.get(\"rotateLabels\", true)) {\n\t\t\t\tlabel.set(\"rotation\", angle - 90);\n\t\t\t}\n\n\t\t\tthis.toggleVisibility(label, position, label.get(\"minPosition\", 0), label.get(\"maxPosition\", 1));\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateTick(tick?: AxisTick, position?: number, endPosition?: number, count?: number) {\n\t\tif (tick) {\n\t\t\tif (position == null) {\n\t\t\t\tposition = 0;\n\t\t\t}\n\n\t\t\tlet location = 0.5;\n\t\t\tif (count != null && count > 1) {\n\t\t\t\tlocation = tick.get(\"multiLocation\", location);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlocation = tick.get(\"location\", location);\n\t\t\t}\n\n\t\t\tif (endPosition != null && endPosition != position) {\n\t\t\t\tposition = position + (endPosition - position) * location;\n\t\t\t}\n\n\t\t\tlet length = tick.get(\"length\", 0);\n\t\t\tconst inside = tick.get(\"inside\");\n\n\t\t\tif (inside) {\n\t\t\t\tlength *= -1;\n\t\t\t}\n\n\t\t\tlet angle = this.positionToAngle(position);\n\n\t\t\tthis.toggleVisibility(tick, position, tick.get(\"minPosition\", 0), tick.get(\"maxPosition\", 1));\n\n\t\t\tconst rendererY = this.get(\"yRenderer\");\n\t\t\tconst axisY = rendererY.axis;\n\n\t\t\tconst point = this.positionToPoint(position, axisY.get(\"start\"));\n\n\t\t\ttick.set(\"draw\", (display) => {\n\t\t\t\tdisplay.moveTo(point.x, point.y);\n\t\t\t\tdisplay.lineTo(point.x - length * $math.cos(angle), point.y - length * $math.sin(angle));\n\t\t\t})\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateBullet(bullet?: AxisBullet, position?: number, endPosition?: number) {\n\t\tif (bullet) {\n\t\t\tconst sprite = bullet.get(\"sprite\");\n\n\n\t\t\tif (sprite) {\n\t\t\t\tif (position == null) {\n\t\t\t\t\tposition = 0;\n\t\t\t\t}\n\n\t\t\t\tlet location = bullet.get(\"location\", 0.5);\n\t\t\t\tif (endPosition != null && endPosition != position) {\n\t\t\t\t\tposition = position + (endPosition - position) * location;\n\t\t\t\t}\n\n\t\t\t\tconst rendererY = this.get(\"yRenderer\");\n\t\t\t\tconst axisY = rendererY.axis;\n\n\t\t\t\tconst point = this.positionToPoint(position, axisY.get(\"start\"));\n\t\t\t\tsprite.setAll({ x: point.x, y: point.y });\n\n\t\t\t\tthis.toggleVisibility(sprite, position, 0, 1);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateFill(fill?: Slice, position?: number, endPosition?: number) {\n\t\tif (fill) {\n\t\t\tif (position == null) {\n\t\t\t\tposition = 0;\n\t\t\t}\n\t\t\tif (endPosition == null) {\n\t\t\t\tendPosition = 1;\n\t\t\t}\n\n\t\t\tconst yRenderer = this.get(\"yRenderer\");\n\t\t\tconst yAxis = yRenderer.axis\n\n\t\t\tconst points = this.getPoints(position, yAxis.get(\"start\", 0), endPosition, yAxis.get(\"end\", 1));\n\n\t\t\tfill.set(\"draw\", (display) => {\n\t\t\t\tdisplay.moveTo(points[0].x, points[0].y);\n\t\t\t\t$array.each(points, (point) => {\n\t\t\t\t\tdisplay.lineTo(point.x, point.y);\n\t\t\t\t})\n\t\t\t\tdisplay.closePath();\n\t\t\t})\n\t\t}\n\t}\n\n\n\t/**\n\t * Returns axis length in pixels.\n\t *\n\t * @return Length\n\t */\n\tpublic axisLength(): number {\n\t\treturn this.getPrivate(\"axisLength\", 0);\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic positionTooltip(tooltip: Tooltip, position: number) {\n\t\tconst yRenderer = this.get(\"yRenderer\");\n\t\tconst start = yRenderer.axis.get(\"start\", 0);\n\t\tconst end = yRenderer.axis.get(\"end\", 1);\n\t\tconst point = this.positionToPoint(position, yRenderer.get(\"axisLocation\", 0.5) * (end - start) + start);\n\t\tthis._positionTooltip(tooltip, point);\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateTooltipBounds(_tooltip: Tooltip) {\n\n\t}\n}\n"]}