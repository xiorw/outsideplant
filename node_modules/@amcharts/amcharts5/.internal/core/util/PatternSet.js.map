{"version":3,"file":"PatternSet.js","sourceRoot":"","sources":["../../../../../src/.internal/core/util/PatternSet.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Pattern } from \"../render/patterns/Pattern\";\nimport type { Color } from \"./Color\";\n\nimport { LinePattern, ILinePatternSettings } from \"../render/patterns/LinePattern\";\nimport { RectanglePattern, IRectanglePatternSettings } from \"../render/patterns/RectanglePattern\";\nimport { CirclePattern, ICirclePatternSettings } from \"../render/patterns/CirclePattern\";\nimport { Entity, IEntitySettings, IEntityPrivate } from \"./Entity\";\n\n\nexport interface IPatternSetSettings extends IEntitySettings {\n\n\t/**\n\t * List of colors in the set.\n\t */\n\tpatterns?: Pattern[];\n\n\t/**\n\t * A step size when using `next()`.\n\t *\n\t * E.g. setting to `2` will make it return every second pattern in the list.\n\t *\n\t * @default 1\n\t */\n\tstep?: number;\n\n\t/**\n\t * A base color to use for all patterns.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/#Colors} for more info\n\t */\n\tcolor?: Color;\n\n\t/**\n\t * Start iterating patterns from specific index.\n\t */\n\tstartIndex?: number;\n\n}\n\nexport interface IPatternSetPrivate extends IEntityPrivate {\n\n\t/**\n\t * Current step.\n\t */\n\tcurrentStep?: number;\n\n}\n\n\n/**\n * An object which holds list of [[Pattern]] objects and can serve them up in\n * an interative way.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/#Pattern_sets} for more info\n * @since 5.10.0\n */\nexport class PatternSet extends Entity {\n\tpublic static className: string = \"PatternSet\";\n\tpublic static classNames: Array<string> = Entity.classNames.concat([PatternSet.className]);\n\n\tdeclare public _settings: IPatternSetSettings;\n\tdeclare public _privateSettings: IPatternSetPrivate;\n\n\tprotected _afterNew() {\n\t\t// Applying themes because pattern set will not have parent\n\t\tsuper._afterNewApplyThemes();\n\n\t\tif (this.get(\"patterns\", []).length === 0) {\n\t\t\tconst color = this.get(\"color\", this.root.interfaceColors.get(\"stroke\"));\n\t\t\tthis.set(\"patterns\", [\n\t\t\t\tthis.getLinePattern({\n\t\t\t\t\twidth: 1000,\n\t\t\t\t\theight: 1000,\n\t\t\t\t\trotation: 45,\n\t\t\t\t\tstrokeWidth: 1,\n\t\t\t\t\t//gap: 6,\n\t\t\t\t\tcolor: color\n\t\t\t\t}),\n\t\t\t\tthis.getRectanglePattern({\n\t\t\t\t\twidth: 10,\n\t\t\t\t\theight: 10,\n\t\t\t\t\trotation: 0,\n\t\t\t\t\tmaxWidth: 4,\n\t\t\t\t\tmaxHeight: 4,\n\t\t\t\t\tcolor: color\n\t\t\t\t}),\n\t\t\t\tthis.getLinePattern({\n\t\t\t\t\twidth: 1000,\n\t\t\t\t\theight: 1000,\n\t\t\t\t\trotation: -45,\n\t\t\t\t\tstrokeWidth: 1,\n\t\t\t\t\tgap: 6,\n\t\t\t\t\tcolor: color\n\t\t\t\t}),\n\t\t\t\tthis.getCirclePattern({\n\t\t\t\t\twidth: 11,\n\t\t\t\t\theight: 11,\n\t\t\t\t\tradius: 2,\n\t\t\t\t\tcolor: color\n\t\t\t\t}),\n\t\t\t\tthis.getLinePattern({\n\t\t\t\t\twidth: 6,\n\t\t\t\t\theight: 6,\n\t\t\t\t\trotation: 90,\n\t\t\t\t\tstrokeWidth: 1,\n\t\t\t\t\tcolor: color\n\t\t\t\t}),\n\t\t\t\tthis.getRectanglePattern({\n\t\t\t\t\twidth: 14,\n\t\t\t\t\theight: 14,\n\t\t\t\t\trotation: 45,\n\t\t\t\t\tgap: 4,\n\t\t\t\t\tmaxWidth: 6,\n\t\t\t\t\tmaxHeight: 6,\n\t\t\t\t\tcheckered: true,\n\t\t\t\t\tcolor: color\n\t\t\t\t}),\n\t\t\t\tthis.getLinePattern({\n\t\t\t\t\twidth: 6,\n\t\t\t\t\theight: 6,\n\t\t\t\t\trotation: 0,\n\t\t\t\t\tstrokeWidth: 1,\n\t\t\t\t\tcolor: color\n\t\t\t\t}),\n\t\t\t\tthis.getRectanglePattern({\n\t\t\t\t\twidth: 15,\n\t\t\t\t\theight: 15,\n\t\t\t\t\trotation: 0,\n\t\t\t\t\tgap: 5,\n\t\t\t\t\tmaxWidth: 5,\n\t\t\t\t\tmaxHeight: 5,\n\t\t\t\t\tcheckered: true,\n\t\t\t\t\tcolor: color\n\t\t\t\t}),\n\t\t\t\tthis.getLinePattern({\n\t\t\t\t\twidth: 1000,\n\t\t\t\t\theight: 1000,\n\t\t\t\t\trotation: 45,\n\t\t\t\t\tstrokeWidth: 2,\n\t\t\t\t\tgap: 3,\n\t\t\t\t\tstrokeDasharray: [4, 2],\n\t\t\t\t\tcolor: color\n\t\t\t\t}),\n\t\t\t\tthis.getCirclePattern({\n\t\t\t\t\twidth: 20,\n\t\t\t\t\theight: 20,\n\t\t\t\t\tradius: 3,\n\t\t\t\t\tgap: 4,\n\t\t\t\t\tcheckered: true,\n\t\t\t\t\tcolor: color\n\t\t\t\t}),\n\t\t\t\tthis.getLinePattern({\n\t\t\t\t\twidth: 1000,\n\t\t\t\t\theight: 1000,\n\t\t\t\t\trotation: -45,\n\t\t\t\t\tstrokeWidth: 2,\n\t\t\t\t\tgap: 3,\n\t\t\t\t\tstrokeDasharray: [4, 2],\n\t\t\t\t\tcolor: color\n\t\t\t\t}),\n\t\t\t\tthis.getRectanglePattern({\n\t\t\t\t\twidth: 10,\n\t\t\t\t\theight: 10,\n\t\t\t\t\trotation: 0,\n\t\t\t\t\tgap: 1,\n\t\t\t\t\tmaxWidth: 9,\n\t\t\t\t\tmaxHeight: 9,\n\t\t\t\t\tcolor: color\n\t\t\t\t}),\n\t\t\t\tthis.getLinePattern({\n\t\t\t\t\twidth: 1000,\n\t\t\t\t\theight: 1000,\n\t\t\t\t\trotation: -45,\n\t\t\t\t\tstrokeWidth: 2,\n\t\t\t\t\tgap: 1,\n\t\t\t\t\tcolor: color\n\t\t\t\t}),\n\t\t\t\tthis.getLinePattern({\n\t\t\t\t\twidth: 1000,\n\t\t\t\t\theight: 1000,\n\t\t\t\t\trotation: 45,\n\t\t\t\t\tstrokeWidth: 2,\n\t\t\t\t\tgap: 1,\n\t\t\t\t\tcolor: color\n\t\t\t\t}),\n\t\t\t\tthis.getLinePattern({\n\t\t\t\t\twidth: 1000,\n\t\t\t\t\theight: 1000,\n\t\t\t\t\trotation: 0,\n\t\t\t\t\tstrokeWidth: 3,\n\t\t\t\t\tgap: 1,\n\t\t\t\t\tcolor: color\n\t\t\t\t}),\n\t\t\t\tthis.getLinePattern({\n\t\t\t\t\twidth: 1000,\n\t\t\t\t\theight: 1000,\n\t\t\t\t\trotation: 90,\n\t\t\t\t\tstrokeWidth: 3,\n\t\t\t\t\tgap: 1,\n\t\t\t\t\tcolor: color\n\t\t\t\t}),\n\t\t\t])\n\t\t}\n\n\t\tthis._dirty[\"patterns\"] = false;\n\n\t}\n\n\tpublic _beforeChanged(): void {\n\t\tif (this.isDirty(\"patterns\")) {\n\t\t\tthis.reset();\n\t\t}\n\t}\n\n\t/**\n\t * Returns a [[Pattern]] at specific index.\n\t *\n\t * @param   index  Index\n\t * @return         Color\n\t */\n\tpublic getIndex(index: number): Pattern {\n\t\tconst patterns = this.get(\"patterns\", []);\n\n\t\tif ((index < patterns.length) && patterns[index] !== null) {\n\t\t\treturn patterns[index];\n\t\t}\n\n\n\n\t\tif (index > (patterns.length - 1)) {\n\t\t\tconst adjustedIndex = index - Math.floor(index * (index / patterns.length));\n\t\t\treturn patterns[adjustedIndex];\n\t\t}\n\t\treturn patterns[index];\n\t}\n\n\t/**\n\t * Returns next [[Color]] in the list.\n\t *\n\t * If the list is out of colors, new ones are generated dynamically.\n\t */\n\tpublic next(): Pattern {\n\t\tlet currentStep = this.getPrivate(\"currentStep\", this.get(\"startIndex\", 0));\n\t\tthis.setPrivate(\"currentStep\", currentStep + this.get(\"step\", 1));\n\t\treturn this.getIndex(currentStep);\n\t}\n\n\t/**\n\t * Resets counter to the start of the list, so the next call for `next()` will\n\t * return the first pattern.\n\t */\n\tpublic reset(): void {\n\t\tthis.setPrivate(\"currentStep\", this.get(\"startIndex\", 0));\n\t}\n\n\t/**\n\t * Returns a [[LinePattern].\n\t *\n\t * @param   settings  Pattern settings\n\t * @return            Pattern object\n\t */\n\tpublic getLinePattern(settings: ILinePatternSettings): LinePattern {\n\t\tlet pattern = LinePattern.new(this.root, settings);\n\t\treturn pattern;\n\t}\n\n\t/**\n\t * Returns a [[RectanglePattern].\n\t *\n\t * @param   settings  Pattern settings\n\t * @return            Pattern object\n\t */\n\tpublic getRectanglePattern(settings: IRectanglePatternSettings): RectanglePattern {\n\t\tlet pattern = RectanglePattern.new(this.root, settings);\n\t\treturn pattern;\n\t}\n\n\t/**\n\t * Returns a [[CirclePattern].\n\t *\n\t * @param   settings  Pattern settings\n\t * @return            Pattern object\n\t */\n\tpublic getCirclePattern(settings: ICirclePatternSettings): CirclePattern {\n\t\tlet pattern = CirclePattern.new(this.root, settings);\n\t\treturn pattern;\n\t}\n\n}"]}